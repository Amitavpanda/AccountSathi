// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  loginId      String  @id @unique
  phoneNumber  String
  password     String
  otp          String?
  refreshToken String?
  name         String?
}

model SupplierPurchase {
  id                String                   @id @unique @default(uuid())
  nameOfTheSupplier String
  phoneNumber       String
  address           String
  totalAmountDue    Float
  listOfItems       String[]
  accountDetails    String?
  additionalDetails String?
  details           SupplierPurchaseDetail[]
}

model SupplierPurchaseDetail {
  id                    String   @id @unique @default(uuid())
  stockName             String
  stockNameDetails      String?
  date                  DateTime
  quantity              Int
  quantityType          String?
  quantityDetails       String?
  price                 Float
  priceDetails          String?
  amount                Float
  totalAmountDue        Float
  amountPaid            Float
  amountPaidDescription String
  additionalDetails1     String?
  additionalDetails2    String?
  dateDescription       String?
  supplierPurchaseId    String
  isPaymentDone         String?
  supplierName          String?


  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  // Relation field
  supplierPurchase SupplierPurchase @relation(fields: [supplierPurchaseId], references: [id])

  @@index([supplierPurchaseId])
}

model SalesInfo {
  id             String            @id @unique @default(uuid())
  name           String
  phoneNumber    String
  address        String
  propieder      String
  totalAmountDue Float
  accountDetails  String?
  additionalDetails  String?
  details        SalesInfoDetail[]
}

model SalesInfoDetail {
  id                    String    @id @unique @default(uuid())
  stockName             String
  stockNameDetails      String?
  date                  DateTime
  quantity              Int
  quantityType          String?
  quantityDetails       String?
  price                 Float
  priceDetails          String?
  amount                Float
  totalAmountDue        Float
  amountPaid            Float
  amountPaidDescription String
  dateDescription       String?
  salesInfoId           String
  supplierName          String?
  supplierId            String?
  hotelName             String?
  additonalDetails1     String?
  additonalDetails2     String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  isPaymentDone         String?
  // Relation field
  salesInfo             SalesInfo @relation(fields: [salesInfoId], references: [id])

  @@index([salesInfoId])
}
